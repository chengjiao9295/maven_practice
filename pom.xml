<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.alice</groupId>
    <artifactId>maven_practice</artifactId>
    <packaging>pom</packaging><!--pom表示他是一个被继承的模块-->
    <version>1.1-SNAPSHOT</version>

    <!--工程和模块的区别：
    工程不等于完整的项目，模块也不等于完整的项目，一个完整的项目看的是代码，代码完整，就可以说这是一个完整的项目，
    和项目是工程还是模块没有关系

    工程天生只能使用自己的内部资源，工程天生是独立的，后台可以和其他工程或模块建立关联关系
    模块天生不是独立的，模块天生是属于父工程。模块一旦创建，所有父工程的资源都可以使用

    父子工程是继承关系，子模块天生集成父工程的，可以使用父工程所有资源
    子模块之间天生是没有关系的

    父子工程之间不用建立关系，继承关系是天生的，不需要手动建立
    平级之间的引用叫依赖，依赖不是先天的，依赖是需要后台建立的
    -->
    <modules>
        <module>maven_service</module>
        <module>maven_dao</module>
        <module>maven_common</module>
        <module>maven_controller</module>
        <module>maven_test</module>
        <module>maven_web</module>
    </modules>

    <!--统一管理jar包版本-->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <spring.version>5.0.2.RELEASE</spring.version>

    </properties>

    <!--锁定jar版本，dependencyManagement标签并不会导入jar包，所以锁定jar的同时，
    还需要在专门的dependencies标签中（和dependencyManagement标签并列，而不是其子标签）导入相关的jar包-->
    <!--maven工程是可以分父子依赖关系的。
       凡是依赖别的项目后，拿到的别的项目的依赖包，都属于传递依赖。
       比如，当前A项目，被B项目依赖-，那么我们A项目中所有jar包都会传递到B项目中。
       B项目开发者，如果再在B项目中导入一套SSM框架的jar包，对于B项目是直接依赖。
       那么直接依赖的jar包就会把我们A项目传递过去的jar包覆盖掉。
       为了防止以上情况的出现，我们可以把A项目中主要jar包的坐标锁住，那么其他依赖该项目中，即使
       是有同名jar包直接依赖，也无法覆盖。-->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context</artifactId>
                <version>${spring.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <!--maven工程要导入jar包的坐标，就必须要考虑解决jar包冲突
        解决jar包冲突的方式一：
        第一声明优先原则，哪个jar包的坐标在靠上的位置，这个jar包就是先声明的。
        先声明的jar包坐标下的依赖包，可以优先进入项目中。

        maven导入jar包的一些概念：
        直接依赖：项目中直接导入的jar包，就是该项目的直接依赖包。
        传递依赖：项目中没有直接导入的jar包，可以通过项目直接依赖jar包传递到项目中去。

        解决jar包冲突的方式二：
        路径近者优先原则，直接依赖路径比传递依赖路径近，那么最终项目进入的jar包会是路径近的直接依赖包

        解决jar包冲突的方式三【推荐使用】
        直接排除法。
        当我们要排除某个jar下依赖包，在配置exclusions标签的时候，内部可以不写版本号。
        因为此时依赖包使用的版本默认和本jar包一样。

        -->

    <dependencies>
<!--        <dependency>-->
<!--            <groupId>org.springframework</groupId>-->
<!--            <artifactId>spring-beans</artifactId>-->
<!--            <version>4.3.18.RELEASE</version>-->
<!--            <exclusions>-->
<!--                <exclusion>-->
<!--                    <groupId>org.springframework</groupId>-->
<!--                    <artifactId>spring-core</artifactId>-->
<!--                </exclusion>-->
<!--            </exclusions>-->
<!--        </dependency>-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.1</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.16</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.1</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.1</version>
        </dependency>
        <!--数据库连接池-->
        <dependency>
            <groupId>commons-dbcp</groupId>
            <artifactId>commons-dbcp</artifactId>
            <version>1.4</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>dubbo</artifactId>
            <version>2.6.6</version>
        </dependency>
        <dependency>
            <groupId>org.apache.zookeeper</groupId>
            <artifactId>zookeeper</artifactId>
            <version>3.4.10</version>
        </dependency>
        <dependency>
            <groupId>com.101tec</groupId>
            <artifactId>zkclient</artifactId>
            <version>0.5</version>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-all</artifactId>
            <version>4.1.32.Final</version>
        </dependency>
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-framework</artifactId>
            <version>2.8.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-recipes</artifactId>
            <version>2.8.0</version>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>org.apache.activemq</groupId>-->
<!--            <artifactId>activemq-client</artifactId>-->
<!--            <version>5.15.12</version>-->
<!--        </dependency>-->
<!--        <dependency>-->
<!--            <groupId>org.apache.activemq</groupId>-->
<!--            <artifactId>activemq-spring</artifactId>-->
<!--            <version>5.15.12</version>-->
<!--        </dependency>-->
        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>activemq-all</artifactId>
            <version>5.15.12</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.glassfish.main.javaee-api/javax.jms -->
        <dependency>
            <groupId>org.glassfish.main.javaee-api</groupId>
            <artifactId>javax.jms</artifactId>
            <version>3.1.2.2</version>
        </dependency>
    </dependencies>

<!--    <build>-->
<!--        <plugins>-->

<!--            &lt;!&ndash; 配置Tomcat插件 &ndash;&gt;-->
<!--            <plugin>-->
<!--                <groupId>org.apache.tomcat.maven</groupId>-->
<!--                <artifactId>tomcat7-maven-plugin</artifactId>-->
<!--                <version>2.2</version>-->
<!--            </plugin>-->
<!--        </plugins>-->
<!--    </build>-->

    <build>
        <defaultGoal>compile</defaultGoal>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>2.5.3</version>
                <configuration>
                    <tagNameFormat>v@{project.version}</tagNameFormat>
                    <autoVersionSubmodules>true</autoVersionSubmodules>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.1</version>
            </plugin>
        </plugins>
    </build>
    <scm>
        <connection>scm:git:https://github.com/chengjiao9295/maven_practice.git</connection><!--从git上拉取代码，只读权限-->
        <developerConnection>scm:git:https://github.com/chengjiao9295/maven_practice.git</developerConnection><!--提交代码到git上，读写权限-->
        <tag>HEAD</tag>
    </scm>

    <!-- 定义snapshots库和releases库的nexus地址 -->
    <distributionManagement>
        <!--部署项目产生的构件到远程仓库需要的信息 -->
        <repository>
            <!-- 库的id -->
            <id>nexus-releases</id>
            <!-- 库的url -->
            <url>http://localhost:8081/repository/alice-releases/</url>
        </repository>
        <snapshotRepository>
            <id>nexus-snapshots</id>
            <url>http://localhost:8081/repository/alice-snapshots/</url>
        </snapshotRepository>
    </distributionManagement>
</project>